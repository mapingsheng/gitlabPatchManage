package test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.Base64;

import org.apache.commons.io.IOUtils;

public class Base64Test {

	public static void main(String[] args) {
		String base64str ="";
		String xiezaiStr = "";
		
		try {
			byte[] buf;
			sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
			buf = decoder.decodeBuffer(xiezaiStr);
			
			InputStream inputSteam = byte2Input(buf);//转换字节数组为字节输入流
			InputStreamReader reader = new InputStreamReader(inputSteam);
			String data = IOUtils.toString(reader);
			System.out.println(data);
			
			/*byte[] buf;
			Class clazz = Class.forName("com.sun.org.apache.xerces.internal.impl.dv.util.Base64");
			Method mainMethod = clazz.getMethod("decode", String.class);
			mainMethod.setAccessible(true);
			Object retObj = mainMethod.invoke(null, xiezaiStr);
			buf = (byte[]) retObj;
			
			InputStream inputSteam = byte2Input(buf);//转换字节数组为字节输入流
			InputStreamReader reader = new InputStreamReader(inputSteam);
			String data = IOUtils.toString(reader);
			System.out.println(data);*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		
				
	}
	
	/**
     * 把字节数组转换成输入流
     *
     *@param  byte[] 字节数组
     *@return InputStream 输入流对象
     */
	private static InputStream byte2Input(byte[] buf){
		return new ByteArrayInputStream(buf);
	}
}
